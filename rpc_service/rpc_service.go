// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc_service.proto

package rpc_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Domain struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DomainId             uint64   `protobuf:"varint,2,opt,name=domainId,proto3" json:"domainId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_376dcb7dada8cc1b, []int{0}
}

func (m *Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Domain.Unmarshal(m, b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return xxx_messageInfo_Domain.Size(m)
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain) GetDomainId() uint64 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

type Layer struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LayerId              uint64   `protobuf:"varint,2,opt,name=layerId,proto3" json:"layerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Layer) Reset()         { *m = Layer{} }
func (m *Layer) String() string { return proto.CompactTextString(m) }
func (*Layer) ProtoMessage()    {}
func (*Layer) Descriptor() ([]byte, []int) {
	return fileDescriptor_376dcb7dada8cc1b, []int{1}
}

func (m *Layer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Layer.Unmarshal(m, b)
}
func (m *Layer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Layer.Marshal(b, m, deterministic)
}
func (m *Layer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layer.Merge(m, src)
}
func (m *Layer) XXX_Size() int {
	return xxx_messageInfo_Layer.Size(m)
}
func (m *Layer) XXX_DiscardUnknown() {
	xxx_messageInfo_Layer.DiscardUnknown(m)
}

var xxx_messageInfo_Layer proto.InternalMessageInfo

func (m *Layer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Layer) GetLayerId() uint64 {
	if m != nil {
		return m.LayerId
	}
	return 0
}

type Experiment struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ExptId               uint64   `protobuf:"varint,2,opt,name=exptId,proto3" json:"exptId,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Experiment) Reset()         { *m = Experiment{} }
func (m *Experiment) String() string { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()    {}
func (*Experiment) Descriptor() ([]byte, []int) {
	return fileDescriptor_376dcb7dada8cc1b, []int{2}
}

func (m *Experiment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Experiment.Unmarshal(m, b)
}
func (m *Experiment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Experiment.Marshal(b, m, deterministic)
}
func (m *Experiment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Experiment.Merge(m, src)
}
func (m *Experiment) XXX_Size() int {
	return xxx_messageInfo_Experiment.Size(m)
}
func (m *Experiment) XXX_DiscardUnknown() {
	xxx_messageInfo_Experiment.DiscardUnknown(m)
}

var xxx_messageInfo_Experiment proto.InternalMessageInfo

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetExptId() uint64 {
	if m != nil {
		return m.ExptId
	}
	return 0
}

func (m *Experiment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Parameter struct {
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Parameter) Reset()         { *m = Parameter{} }
func (m *Parameter) String() string { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()    {}
func (*Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_376dcb7dada8cc1b, []int{3}
}

func (m *Parameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Parameter.Unmarshal(m, b)
}
func (m *Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Parameter.Marshal(b, m, deterministic)
}
func (m *Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameter.Merge(m, src)
}
func (m *Parameter) XXX_Size() int {
	return xxx_messageInfo_Parameter.Size(m)
}
func (m *Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_Parameter proto.InternalMessageInfo

func (m *Parameter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Result struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_376dcb7dada8cc1b, []int{4}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type Data struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_376dcb7dada8cc1b, []int{5}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*Domain)(nil), "Domain")
	proto.RegisterType((*Layer)(nil), "Layer")
	proto.RegisterType((*Experiment)(nil), "Experiment")
	proto.RegisterType((*Parameter)(nil), "Parameter")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*Data)(nil), "Data")
}

func init() { proto.RegisterFile("rpc_service.proto", fileDescriptor_376dcb7dada8cc1b) }

var fileDescriptor_376dcb7dada8cc1b = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x4f, 0xea, 0x40,
	0x14, 0x85, 0x1f, 0x0f, 0x28, 0x70, 0x21, 0xef, 0x61, 0x4d, 0xb4, 0xe2, 0xc2, 0x66, 0x12, 0x23,
	0x6a, 0x32, 0x0b, 0x8d, 0x89, 0x6b, 0x85, 0x45, 0x13, 0x62, 0x08, 0x89, 0x3f, 0x60, 0x4a, 0x6f,
	0x62, 0x23, 0x9d, 0x36, 0xd3, 0x69, 0x84, 0x9f, 0xec, 0xbf, 0x30, 0xd3, 0x5b, 0x4a, 0x23, 0x08,
	0xae, 0x7a, 0x6e, 0xe6, 0x3b, 0xbd, 0xa7, 0xa7, 0x2d, 0xfc, 0x9b, 0xc7, 0x32, 0xcd, 0x22, 0x54,
	0x3c, 0x51, 0xb1, 0x8e, 0xd9, 0x23, 0x58, 0xa3, 0x38, 0x12, 0xa1, 0xb4, 0x6d, 0x68, 0x48, 0x11,
	0xa1, 0x53, 0x73, 0x6b, 0xc3, 0xce, 0x2c, 0xd7, 0xf6, 0x00, 0xda, 0x41, 0x7e, 0xea, 0x05, 0xce,
	0x5f, 0xb7, 0x36, 0x6c, 0xcc, 0xca, 0x99, 0x3d, 0x40, 0x73, 0x22, 0x56, 0xa8, 0x76, 0x1a, 0x1d,
	0x68, 0x2d, 0xcc, 0x61, 0xe9, 0x5b, 0x8f, 0x6c, 0x02, 0x30, 0x5e, 0x26, 0xa8, 0xc2, 0x08, 0xa5,
	0xde, 0xe9, 0x3d, 0x01, 0x0b, 0x97, 0x89, 0x2e, 0xad, 0xc5, 0x64, 0x58, 0xbd, 0x4a, 0xd0, 0xa9,
	0x13, 0x6b, 0x34, 0xbb, 0x80, 0xce, 0x54, 0x28, 0x11, 0xa1, 0xa6, 0x20, 0x5b, 0x80, 0x0b, 0xd6,
	0x0c, 0xd3, 0x6c, 0xa1, 0xcd, 0x6d, 0x55, 0xae, 0x8a, 0x65, 0xc5, 0xc4, 0x06, 0xd0, 0x18, 0x09,
	0x2d, 0x8c, 0x3b, 0x10, 0x5a, 0xac, 0xa3, 0x18, 0x7d, 0xf7, 0x59, 0x87, 0xf6, 0x73, 0x51, 0x98,
	0xcd, 0xa0, 0xe7, 0xc9, 0x14, 0x95, 0x2e, 0x0a, 0x6b, 0x71, 0x12, 0x83, 0x16, 0xa7, 0x15, 0xec,
	0x8f, 0x7d, 0x05, 0xc7, 0xc4, 0xe4, 0xd5, 0x78, 0xb2, 0x40, 0x9b, 0xdc, 0xac, 0xa8, 0x82, 0xb7,
	0x70, 0x4a, 0xe0, 0xa6, 0x0c, 0x4f, 0x52, 0x9f, 0xdb, 0xf0, 0x35, 0xf4, 0xa7, 0x59, 0xfa, 0xf6,
	0x82, 0x1f, 0x9b, 0x87, 0x05, 0x5e, 0xea, 0x2a, 0xca, 0xa0, 0x37, 0xc2, 0x05, 0x6a, 0xdc, 0x1f,
	0x92, 0x98, 0x43, 0x21, 0x2f, 0xe1, 0x88, 0xc0, 0xb1, 0x79, 0x03, 0x3f, 0xc6, 0x1b, 0xc2, 0x7f,
	0xc2, 0x7e, 0x93, 0xee, 0x35, 0x09, 0xc4, 0xde, 0x74, 0x2e, 0x74, 0x89, 0xa1, 0x75, 0x16, 0xcf,
	0xaf, 0x55, 0xe2, 0x06, 0xfa, 0x44, 0x54, 0x3e, 0xa4, 0x2e, 0xdf, 0x0c, 0xdf, 0xb2, 0x11, 0x7b,
	0x28, 0xdb, 0xd3, 0x39, 0x9c, 0xcd, 0xe3, 0x88, 0xcf, 0x45, 0xe8, 0x63, 0xf8, 0x8e, 0x5c, 0xf8,
	0x1a, 0x53, 0xcd, 0x83, 0xcc, 0xf7, 0x63, 0xdf, 0xca, 0xff, 0x96, 0xfb, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x56, 0xbd, 0x99, 0xba, 0x3f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerClient interface {
	InsertDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Result, error)
	InsertLayerInDomain(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error)
	InsertExperimentInLayer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error)
	PushNewParameter(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Result, error)
	DeleteDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Result, error)
	DeleteLayerInDomain(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error)
	DeleteExptInLayer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error)
	DeleteParameter(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Result, error)
	UpdateDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Result, error)
	UpdateLayer(ctx context.Context, in *Layer, opts ...grpc.CallOption) (*Result, error)
	UpdateExperiment(ctx context.Context, in *Experiment, opts ...grpc.CallOption) (*Result, error)
	UpdateParameter(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Result, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) InsertDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/InsertDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) InsertLayerInDomain(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/InsertLayerInDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) InsertExperimentInLayer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/InsertExperimentInLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) PushNewParameter(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/PushNewParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) DeleteDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) DeleteLayerInDomain(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/DeleteLayerInDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) DeleteExptInLayer(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/DeleteExptInLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) DeleteParameter(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/DeleteParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) UpdateDomain(ctx context.Context, in *Domain, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/UpdateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) UpdateLayer(ctx context.Context, in *Layer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/UpdateLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) UpdateExperiment(ctx context.Context, in *Experiment, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/UpdateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) UpdateParameter(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Consumer/UpdateParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServer is the server API for Consumer service.
type ConsumerServer interface {
	InsertDomain(context.Context, *Domain) (*Result, error)
	InsertLayerInDomain(context.Context, *Data) (*Result, error)
	InsertExperimentInLayer(context.Context, *Data) (*Result, error)
	PushNewParameter(context.Context, *Parameter) (*Result, error)
	DeleteDomain(context.Context, *Domain) (*Result, error)
	DeleteLayerInDomain(context.Context, *Data) (*Result, error)
	DeleteExptInLayer(context.Context, *Data) (*Result, error)
	DeleteParameter(context.Context, *Parameter) (*Result, error)
	UpdateDomain(context.Context, *Domain) (*Result, error)
	UpdateLayer(context.Context, *Layer) (*Result, error)
	UpdateExperiment(context.Context, *Experiment) (*Result, error)
	UpdateParameter(context.Context, *Parameter) (*Result, error)
}

// UnimplementedConsumerServer can be embedded to have forward compatible implementations.
type UnimplementedConsumerServer struct {
}

func (*UnimplementedConsumerServer) InsertDomain(ctx context.Context, req *Domain) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDomain not implemented")
}
func (*UnimplementedConsumerServer) InsertLayerInDomain(ctx context.Context, req *Data) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLayerInDomain not implemented")
}
func (*UnimplementedConsumerServer) InsertExperimentInLayer(ctx context.Context, req *Data) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertExperimentInLayer not implemented")
}
func (*UnimplementedConsumerServer) PushNewParameter(ctx context.Context, req *Parameter) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNewParameter not implemented")
}
func (*UnimplementedConsumerServer) DeleteDomain(ctx context.Context, req *Domain) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (*UnimplementedConsumerServer) DeleteLayerInDomain(ctx context.Context, req *Data) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLayerInDomain not implemented")
}
func (*UnimplementedConsumerServer) DeleteExptInLayer(ctx context.Context, req *Data) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExptInLayer not implemented")
}
func (*UnimplementedConsumerServer) DeleteParameter(ctx context.Context, req *Parameter) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParameter not implemented")
}
func (*UnimplementedConsumerServer) UpdateDomain(ctx context.Context, req *Domain) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (*UnimplementedConsumerServer) UpdateLayer(ctx context.Context, req *Layer) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLayer not implemented")
}
func (*UnimplementedConsumerServer) UpdateExperiment(ctx context.Context, req *Experiment) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperiment not implemented")
}
func (*UnimplementedConsumerServer) UpdateParameter(ctx context.Context, req *Parameter) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParameter not implemented")
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_InsertDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).InsertDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/InsertDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).InsertDomain(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_InsertLayerInDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).InsertLayerInDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/InsertLayerInDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).InsertLayerInDomain(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_InsertExperimentInLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).InsertExperimentInLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/InsertExperimentInLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).InsertExperimentInLayer(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_PushNewParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).PushNewParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/PushNewParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).PushNewParameter(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).DeleteDomain(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_DeleteLayerInDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).DeleteLayerInDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/DeleteLayerInDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).DeleteLayerInDomain(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_DeleteExptInLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).DeleteExptInLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/DeleteExptInLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).DeleteExptInLayer(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_DeleteParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).DeleteParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/DeleteParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).DeleteParameter(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Domain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/UpdateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).UpdateDomain(ctx, req.(*Domain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_UpdateLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Layer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).UpdateLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/UpdateLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).UpdateLayer(ctx, req.(*Layer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_UpdateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Experiment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).UpdateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/UpdateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).UpdateExperiment(ctx, req.(*Experiment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_UpdateParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).UpdateParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Consumer/UpdateParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).UpdateParameter(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertDomain",
			Handler:    _Consumer_InsertDomain_Handler,
		},
		{
			MethodName: "InsertLayerInDomain",
			Handler:    _Consumer_InsertLayerInDomain_Handler,
		},
		{
			MethodName: "InsertExperimentInLayer",
			Handler:    _Consumer_InsertExperimentInLayer_Handler,
		},
		{
			MethodName: "PushNewParameter",
			Handler:    _Consumer_PushNewParameter_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _Consumer_DeleteDomain_Handler,
		},
		{
			MethodName: "DeleteLayerInDomain",
			Handler:    _Consumer_DeleteLayerInDomain_Handler,
		},
		{
			MethodName: "DeleteExptInLayer",
			Handler:    _Consumer_DeleteExptInLayer_Handler,
		},
		{
			MethodName: "DeleteParameter",
			Handler:    _Consumer_DeleteParameter_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _Consumer_UpdateDomain_Handler,
		},
		{
			MethodName: "UpdateLayer",
			Handler:    _Consumer_UpdateLayer_Handler,
		},
		{
			MethodName: "UpdateExperiment",
			Handler:    _Consumer_UpdateExperiment_Handler,
		},
		{
			MethodName: "UpdateParameter",
			Handler:    _Consumer_UpdateParameter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_service.proto",
}
